Queue nə zaman istifadə olunur?
1. Asynchronous proseslərdə
2. Çox böyük load applarda. Load yaymaq üçün. Əgər load çoxdursa və çatdırmırıqsa, sorğusun Queue-ya yazıb, sonra Queue-dən batch-larla 1000-1000 götürüb icra etmək
RabbitMQ istifadə etmək üçün docker-də RabbitMQ yüklə run elə

RabbitMQ - saniyədə 40 min message - sadə message queue lazımdırsa bunu işlət. bunun infrasukturu və supportu asandırş RabbitMQ sıra ilə işləyir. Yəni birinci göndərilən message birinci email olunur. Tutaq ki, ƏDV geri alda eyni çeki 5 adam portala daxil etsə onda ilk daxil edənin adına yazılacaq həmin çek, digər adamlar xəta alacaq
Kafka - saniyədə 1 milyon. high load applarda bunu işlət. Kafkada var: topic, replica, broker

Redis - caching üçün istifadə edilir
RabbitMQ - isə asinxron üçün
əgər layihəni asinxron-a keçirə bilmirsənsə yəni müştəri tərəfdən biznes tərəfdən nazarılıq varsa və layihə də sinxronda çox gec işləyirsə onda reactive programming araşdır bununla layihəsi sinxron saxlamaq şərti ilə sürətləndirə bilərsən

AMQP protokolu ilə işləyir
producer (sender) və consumer (listener). göndərdiyimiz message birbaşa queue-yə düşmür. senderin göndərdiyi message birinci exchange bölməsinə düşür. exchange burda bir növ beyin rolunu oynayır. koddakı controller rolunu oynayır. baxır message-ni hansı queue-yə lazımdırsa ora göndərir. ola bilər bir neçə queue-yə göndərir. bəs nəyin əsasında bilir? binding (roots???) əsasında. key-lərdir id-lər. exchange bu binding-lərə baxır, həmin key-lərin də əvvəllədən qabağında value olaraq queue name(s) saxlayırıq ki bu key göndərdə bu queue(lərə)-ə göndər. consumer (listener) isə baxır queue-yə gələn message-ləri listen edib icra edir.
microservis arxitekturasında bir ms sender rolunu oynayır, digər bir ms isə listener olur.
queue hansı tərəfdə yaradılmalıdır? senderdə yoxsa listenerdə? cavab listenerdə. çünki sender sayı çox ola bilər, listener 1 ədəd olur
DLQ - dead letter queue - message-lər listenerdə icra edilməyə başladısa artıq queue-dən silinir. bəs indi deyək ki, icra edilən zaman kodda xəta verdi exception çıxdı, message-də queue-dən silinib. demək bizim message-mız icra edilməmiş qaldı. Onda DLQ bizim köməyimizə çatır. yəni exception çıxanda message-lər itməsin deyə DLQ işlədirik. queue-dəki message-lar nə vaxt icra edilə bilmirsə exception verirsə onda onlar düşür DLQ-yə sonra biz özümüz burda yığılan message-ləri istədiyimiz nəsə edə bilərik. ya yenidən icra edə bilərik ya sadəcə baxıb araşdıra bilərik ki niyə exception verib və s
DLQ-yə nə vaxt düşür? interview question. Yanlız RunTimeException-lar DLQ-ə düşür
DLQ-yə düşməmişdən qabaq listener retry da qoşa bilərik ki, tutaq ki, 3 dəfə retry elə yenə də exception çıxırsa ondan sonra DLQ-ə əlavə elə
və ya DLQ-ə ümumiyyət istəyirik ki, düşməsin try catch-in catch hissəsində throw yazmırıq. ya boş qoyuruq, ya da log.error yazırb loglayırıq
listenerdə və senderdə heç bir biznes məntiq yazmırıq. listener sender sadəcə servis classlarının hansısa methodunu çağırır
Rabbit özü default olaraq 5672 portunda ayağa qalxır. Rabbit admin panel isə 15672. yəni localhost:15672/#/exchanges yazırıq

internal caching - L1, L2
external caching - Redis (default port 6379). Redis key-value məntiqi ilə işləyir. özü NoSQL databazadır
cache nə zaman istifadə oluna bilər? Misal üçün bizim sorğumuz pulludursa. Misal üçün Asana sorğu gedir və ya kredit bürosuna sorğu gedir. Eyni müştəri üçün eyni servisi gündə  10 dəfə çağırmağın mənası qalmır, boşuna pul yazır. Ondansa ilk sorğunu həqiqətən də third-party-yə göndərib, sonrakıları cache-dən gətirmək olar.